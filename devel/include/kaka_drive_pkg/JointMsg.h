// Generated by gencpp from file kaka_drive_pkg/JointMsg.msg
// DO NOT EDIT!


#ifndef KAKA_DRIVE_PKG_MESSAGE_JOINTMSG_H
#define KAKA_DRIVE_PKG_MESSAGE_JOINTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kaka_drive_pkg
{
template <class ContainerAllocator>
struct JointMsg_
{
  typedef JointMsg_<ContainerAllocator> Type;

  JointMsg_()
    : Time(0)
    , JointPos()  {
    }
  JointMsg_(const ContainerAllocator& _alloc)
    : Time(0)
    , JointPos(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _Time_type;
  _Time_type Time;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _JointPos_type;
  _JointPos_type JointPos;




  typedef boost::shared_ptr< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> const> ConstPtr;

}; // struct JointMsg_

typedef ::kaka_drive_pkg::JointMsg_<std::allocator<void> > JointMsg;

typedef boost::shared_ptr< ::kaka_drive_pkg::JointMsg > JointMsgPtr;
typedef boost::shared_ptr< ::kaka_drive_pkg::JointMsg const> JointMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kaka_drive_pkg::JointMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kaka_drive_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'kaka_drive_pkg': ['/home/leo/Desktop/Kaka_Project/src/kaka_drive_pkg/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18b642456cbd4fcb5191232b30f70080";
  }

  static const char* value(const ::kaka_drive_pkg::JointMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18b642456cbd4fcbULL;
  static const uint64_t static_value2 = 0x5191232b30f70080ULL;
};

template<class ContainerAllocator>
struct DataType< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kaka_drive_pkg/JointMsg";
  }

  static const char* value(const ::kaka_drive_pkg::JointMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Time\n\
float32[] JointPos\n\
";
  }

  static const char* value(const ::kaka_drive_pkg::JointMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Time);
      stream.next(m.JointPos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kaka_drive_pkg::JointMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kaka_drive_pkg::JointMsg_<ContainerAllocator>& v)
  {
    s << indent << "Time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Time);
    s << indent << "JointPos[]" << std::endl;
    for (size_t i = 0; i < v.JointPos.size(); ++i)
    {
      s << indent << "  JointPos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.JointPos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KAKA_DRIVE_PKG_MESSAGE_JOINTMSG_H
